@startuml


' Define the Song class
class Song {
    - String title
    - String artist
    + Song(String title, String artist)
    + String getTitle()
    + String getArtist()
    + String toString()
}

' Define the Node class
class Node {
    - Song song
    - Node next
    - Node prev
    + Node(Song song)
    + Song getSong()
    + Node getNext()
    + void setNext(Node next)
    + Node getPrev()
    + void setPrev(Node prev)
}

' Define the CircularDoublyLinkedList class
class CircularDoublyLinkedList {
    - Node head
    - Node tail
    + void addNode(Song song)
    + void next()
    + void previous()
    + void shuffle()
    + int getSize()
    + Node getNodeAt(int index)
    + void printList()
}

' Define the Playlist class
class Playlist {
    - String name
    - CircularDoublyLinkedList songList
    + Playlist(String name)
    + void addSong(Song song)
    + void play()
    + void playNext()
    + void playPrevious()
    + void shufflePlay()
    + void showSongs()
    + String getName()
}

' Define the PlaylistManager class
class PlaylistManager <<controller>> {
    - ArrayList<Playlist> listOfPlaylists
    + void createPlaylist(String name)
    + void removePlaylist(String name)
    + Playlist findPlaylistByName(String name)
    + void showPlaylists()
}

' Define the SongLibrary class
class SongLibrary <<library>> {
    - ArrayList<Song> listOfSongs
    + void addSong(Song song)
    + Song findSongByName(String name)
    + void showSongs()
}

' Define the SongManager class
class SongManager <<controller>> {
    - ArrayList<Playlist> playlists
    - SongLibrary songLibrary
    - Playlist currentPlaylist
    + SongManager()
    + void start()
    + void createPlaylist()
    + void addSongToPlaylist()
    + void playPlaylist()
    + void enqueueSong()
    + void playQueue()
    + void showPlaylists()
    + void showSongs()
    + void exit()
}

' Define the Player class
class Player <<controller>> {
    - CircularDoublyLinkedList songQueue
    + void playCurrentSong()
    + void playNextSong()
    + void playPreviousSong()
    + void shuffle()
}

' Define the ConsoleManager class
class ConsoleManager <<utility>> {
    + void clearConsole()
    + String getCommandInput()
    + void showMessage(String message)
    + void waitForEnter()
    + void displayPlaylistList()
    + void displaySongList()
}

' Define the State interface
interface State <<interface>> {
    + void display()
    + void handleInput(String input)
}

' Define Concrete State Classes
class MainMenuState <<state>> {
    + display()
    + handleInput(String input)
}

class ShowPlaylistsState <<state>> {
    + display()
    + handleInput(String input)
}

class PlayQueueState <<state>> {
    + display()
    + handleInput(String input)
}

class CreateState <<state>> {
    + display()
    + handleInput(String input)
}

class ShowSongState <<state>> {
    + display()
    + handleInput(String input)
}

class EditPlaylistState <<state>>{
    + display()
    + handleInput(String input)
}

class CommandParserUtil {
    + parseIndexCommand()
    + isNumeric()
    + validCommand()
}

class PlaylistActionHelper{
    + handlePlaylistAction()
    + handleShowPlaylist()
    + handlePlayPlaylist()
}


' Define the MusicSimulator (Context) class
class MusicSimulator <<context>> {
    - State currentState
    + ConsoleManager console
    + SongManager songManager
    + void setState(State state)
    + void run()
}

' Relationships between classes
Node --> Song : contains
CircularDoublyLinkedList --> Node : manages
Playlist --> CircularDoublyLinkedList : uses
PlaylistManager --> Playlist : manages
SongLibrary --> Song : stores

SongManager --> PlaylistManager : controls
SongManager --> SongLibrary : controls
SongManager --> Player : controls
Player --> CircularDoublyLinkedList : uses as queue

ConsoleManager -down-> SongManager : interacts
MusicSimulator --|> State : has
MusicSimulator --|> ConsoleManager : interacts
MusicSimulator --|> SongManager : interacts

State --> MainMenuState: implements
State --> ShowPlaylistsState: implements
State --> PlayQueueState: implements
State --> CreateState : implements
State --> ShowSongState: implements
State --> EditPlaylistState: implements


CommandParserUtil <-- EditPlaylistState: use
CommandParserUtil <-- ShowSongState: use
CommandParserUtil <-- PlaylistActionHelper: use

PlaylistActionHelper <-- ShowPlaylistsState: use
PlaylistActionHelper <-- CreateState: use

@enduml
